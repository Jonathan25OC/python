class NFA:
    def __init__(self):
        # Definir el conjunto de estados actuales (iniciando en q0)
        self.current_states = {'q0'}

        # Definir las transiciones del NFA
        self.transitions = {
            'q0': {'0': {'q0', 'q1'}, '1': {'q0'}},  # q0: con 0 va a q0 o q1, con 1 va a q0
            'q1': {'1': {'q2'}},                     # q1: con 1 va a q2 (subcadena "01")
            'q2': {},                                # q2: estado de aceptación
        }

        # Definir el estado de aceptación
        self.accepting_states = {'q2'}

    def transition(self, symbol):
        # Actualizar los estados actuales basados en el símbolo de entrada
        next_states = set()
        for state in self.current_states:
            if symbol in self.transitions.get(state, {}):
                next_states.update(self.transitions[state][symbol])
        self.current_states = next_states

    def is_accepting(self):
        # Verificar si alguno de los estados actuales es un estado de aceptación
        return any(state in self.accepting_states for state in self.current_states)

    def run(self, input_string):
        # Recorrer la cadena de entrada y realizar las transiciones
        for symbol in input_string:
            self.transition(symbol)
        # Retornar si la cadena es aceptada o no
        return self.is_accepting()


# Crear un NFA y probar una cadena binaria
nfa = NFA()
binary_string = "1101"

if nfa.run(binary_string):
    print(f"La cadena '{binary_string}' es aceptada.")
else:
    print(f"La cadena '{binary_string}' es rechazada.")
