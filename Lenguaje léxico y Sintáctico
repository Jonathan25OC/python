import ply.lex as lex
import ply.yacc as yacc

# Analizador léxico
tokens = (
    'NUMBER',
    'ADD',
    'SUB',
    'MUL',
    'DIV',
    'LPAREN',
    'RPAREN'
)

# Palabras clave
t_ADD = r'ADD'
t_SUB = r'SUB'
t_MUL = r'MUL'
t_DIV = r'DIV'
t_LPAREN = r'\('
t_RPAREN = r'\)'

# Expresión regular para números
def t_NUMBER(t):
    r'\d+'
    t.value = int(t.value)
    return t

# Ignorar espacios
t_ignore = ' \t'

# Manejo de errores léxicos
def t_error(t):
    print(f"Carácter ilegal '{t.value[0]}'")
    t.lexer.skip(1)

# Construye el analizador léxico
lexer = lex.lex()

# Analizador sintáctico
def p_expression_binop(p):
    '''expression : expression ADD expression
                  | expression SUB expression
                  | expression MUL expression
                  | expression DIV expression'''
    if p[2] == 'ADD':
        p[0] = p[1] + p[3]
    elif p[2] == 'SUB':
        p[0] = p[1] - p[3]
    elif p[2] == 'MUL':
        p[0] = p[1] * p[3]
    elif p[2] == 'DIV':
        p[0] = p[1] / p[3]

def p_expression_number(p):
    'expression : NUMBER'
    p[0] = p[1]

def p_expression_paren(p):
    'expression : LPAREN expression RPAREN'
    p[0] = p[2]

# Manejo de errores sintácticos
def p_error(p):
    print("Error de sintaxis")

# Construye el analizador sintáctico
parser = yacc.yacc()

# Prueba de análisis
while True:
    try:
        s = input('Ingrese una expresión: ')
    except EOFError:
        break
    if not s:
        continue
    result = parser.parse(s)
    print("Resultado:", result)
